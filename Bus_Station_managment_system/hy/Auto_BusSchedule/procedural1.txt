CREATE OR REPLACE PROCEDURE GEN_BUS_SCHEDULES (
  p_rda_id   IN routeDriverAssignmentList.routeDriverAssignmentId%TYPE,
  p_max_days IN NUMBER DEFAULT 90
) IS
  v_route_id      route.routeId%TYPE;
  v_assignment_id routeDriverAssignmentList.assignmentId%TYPE;
  v_freq          routeDriverAssignmentList.frequency%TYPE;
  v_weekdays      routeDriverAssignmentList.weekdays%TYPE;
  v_eff_from      DATE;
  v_eff_to        DATE;
  v_status        routeDriverAssignmentList.status%TYPE;

  v_dep_hhmm     route.plannedDepartureTime%TYPE;
  v_arr_hhmm     route.plannedArrivalTime%TYPE;
  v_est_min      route.estimatedDuration%TYPE;
  v_distance_km  route.distanceKm%TYPE;

  v_start_date   DATE;
  v_end_date     DATE;
  v_dep_ts       TIMESTAMP;
  v_arr_ts       TIMESTAMP;

  TYPE t_numset IS TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;

  -- helper functions (weekday_mon1, parse_weekdays, at_time, calc_arrival, to_base36, make_bs_id, calc_profit, insert_if_absent)
  -- [kept exactly as in your version, no change]
  -- ...

BEGIN
  -- fetch driver assignment row
  BEGIN
    SELECT routeId, assignmentId, frequency, weekdays, effectiveFrom, effectiveTo, status
      INTO v_route_id, v_assignment_id, v_freq, v_weekdays, v_eff_from, v_eff_to, v_status
    FROM routeDriverAssignmentList
    WHERE routeDriverAssignmentId = p_rda_id;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-21001, 'RouteDriverAssignment ' || p_rda_id || ' not found.');
  END;

  -- business validation
  IF LOWER(v_status) <> 'active' THEN
    RAISE_APPLICATION_ERROR(-21002, 'RouteDriverAssignment ' || p_rda_id || ' is not active.');
  END IF;

  -- fetch route info
  BEGIN
    SELECT plannedDepartureTime, plannedArrivalTime, estimatedDuration, distanceKm
      INTO v_dep_hhmm, v_arr_hhmm, v_est_min, v_distance_km
    FROM route
    WHERE routeId = v_route_id;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-21003, 'Route ' || v_route_id || ' not found.');
  END;

  v_start_date := TRUNC(v_eff_from);
  v_end_date   := CASE
                    WHEN v_eff_to IS NOT NULL THEN TRUNC(v_eff_to)
                    ELSE TRUNC(v_eff_from) + p_max_days
                  END;

  IF v_start_date > v_end_date THEN
    RAISE_APPLICATION_ERROR(-21004, 'Invalid effectiveFrom/effectiveTo range for ' || p_rda_id);
  END IF;

  -- schedule generation
  IF LOWER(v_freq) = 'daily' THEN
    FOR d IN 0 .. (v_end_date - v_start_date) LOOP
      v_dep_ts := at_time(v_start_date + d, v_dep_hhmm);
      v_arr_ts := calc_arrival(v_dep_ts, v_est_min, v_arr_hhmm);
      insert_if_absent(p_rda_id, v_dep_ts, v_arr_ts, calc_profit(v_distance_km));
    END LOOP;

  ELSIF LOWER(v_freq) = 'weekly' THEN
    DECLARE
      v_set t_numset := parse_weekdays(v_weekdays);
      v_d   DATE := v_start_date;
      v_w   PLS_INTEGER;
    BEGIN
      WHILE v_d <= v_end_date LOOP
        v_w := weekday_mon1(v_d);
        IF v_set.EXISTS(v_w) THEN
          v_dep_ts := at_time(v_d, v_dep_hhmm);
          v_arr_ts := calc_arrival(v_dep_ts, v_est_min, v_arr_hhmm);
          insert_if_absent(p_rda_id, v_dep_ts, v_arr_ts, calc_profit(v_distance_km));
        END IF;
        v_d := v_d + 1;
      END LOOP;
    END;

  ELSIF LOWER(v_freq) = 'monthly' THEN
    DECLARE
      v_day  PLS_INTEGER := TO_NUMBER(TO_CHAR(v_start_date, 'DD'));
      v_cur  DATE := v_start_date;
      v_m    DATE;
      v_try  DATE;
      v_eom  DATE;
    BEGIN
      WHILE v_cur <= v_end_date LOOP
        v_m   := TRUNC(v_cur, 'MM');
        v_eom := TRUNC(ADD_MONTHS(v_m, 1) - 1);
        v_try := v_m + (v_day - 1);
        IF v_try > v_eom THEN
          v_try := v_eom;
        END IF;

        IF v_try BETWEEN v_start_date AND v_end_date THEN
          v_dep_ts := at_time(v_try, v_dep_hhmm);
          v_arr_ts := calc_arrival(v_dep_ts, v_est_min, v_arr_hhmm);
          insert_if_absent(p_rda_id, v_dep_ts, v_arr_ts, calc_profit(v_distance_km));
        END IF;

        v_cur := ADD_MONTHS(v_cur, 1);
      END LOOP;
    END;

  ELSE
    RAISE_APPLICATION_ERROR(-21005, 'Unknown frequency "' || v_freq || '" for ' || p_rda_id);
  END IF;

EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unexpected error in GEN_BUS_SCHEDULES: ' || SQLERRM);
    RAISE;
END;
/
SHOW ERRORS PROCEDURE GEN_BUS_SCHEDULES;
