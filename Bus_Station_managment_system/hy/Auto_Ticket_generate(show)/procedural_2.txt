CREATE OR REPLACE PROCEDURE GEN_TICKETS_FOR_SCHEDULE (
  p_bus_schedule_id IN busSchedule.busScheduleId%TYPE,
  p_rate_per_km     IN NUMBER DEFAULT 0.25
) IS
  v_capacity      bus.capacity%TYPE;
  v_distance_km   route.distanceKm%TYPE;
  v_rda_id        routeDriverAssignmentList.routeDriverAssignmentId%TYPE;
  v_route_id      route.routeId%TYPE;
  v_assignment_id driverListAssignment.assignmentId%TYPE;

  v_type_default    ticket.type%TYPE   := 'booking';
  v_status_default  ticket.status%TYPE := 'on_selling';

  v_existing_cnt NUMBER;
  v_price NUMBER(8,2);

BEGIN
  -- Check if tickets already exist ma
  SELECT COUNT(*)
  INTO v_existing_cnt
  FROM ticket
  WHERE busScheduleId = p_bus_schedule_id;

  IF v_existing_cnt > 0 THEN
    RETURN;
  END IF;

  -- 1. Fetch related info from the grandpa table first :
  SELECT bs.routeDriverAssignmentId
    INTO v_rda_id
  FROM busSchedule bs
  WHERE bs.busScheduleId = p_bus_schedule_id;
  
  -- 2. Get routeId For calculate price , Get assignmentId to Fetch Target Bus  
  SELECT rda.routeId, rda.assignmentId
    INTO v_route_id, v_assignment_id
  FROM routeDriverAssignmentList rda
  WHERE rda.routeDriverAssignmentId = v_rda_id;

  -- 2.1 
  SELECT b.capacity
    INTO v_capacity
  FROM driverListAssignment dla
  JOIN bus b ON b.busId = dla.busId
  WHERE dla.assignmentId = v_assignment_id;

  -- 2.2 
  SELECT NVL(r.distanceKm, 0)
    INTO v_distance_km
  FROM route r
  WHERE r.routeId = v_route_id;

  -- Controlled error (business rule)
  IF v_capacity IS NULL OR v_capacity <= 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Invalid bus capacity for schedule ' || p_bus_schedule_id);
  END IF;

  -- 4. calculate the price 
  v_price := ROUND(p_rate_per_km * v_distance_km, 2);
  
  -- 3. count how many ticket we can generate based on the bus capacity 
  FOR i IN 1..v_capacity LOOP
    BEGIN
      INSERT INTO ticket (
        ticketId, busScheduleId, customerId, seatNo, price, type, status,
        cancellationDate, extensionDate, extendedFromId, createdAt, updatedAt
      ) VALUES (
        FN_NEXT_TICKET_ID(),
        p_bus_schedule_id,
        NULL,
        'S' || LPAD(i, 3, '0'),
        v_price,
        v_type_default,
        v_status_default,
        NULL, NULL, NULL,
        SYSTIMESTAMP, SYSTIMESTAMP
      );
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
        -- another session already inserted this seat
        NULL;
    END;
  END LOOP;

EXCEPTION
  -- Controlled: missing foreign key data
  WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20002, 'Required data not found for schedule ' || p_bus_schedule_id);

  -- Default generic error catcher
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unexpected error in GEN_TICKETS_FOR_SCHEDULE: ' || SQLERRM);
    -- Optional: rethrow to stop silently swallowing
    RAISE;
END;
/
SHOW ERRORS PROCEDURE GEN_TICKETS_FOR_SCHEDULE;

select ticketId from ticket where busScheduleId = 'S000425';
EXEC GEN_TICKETS_FOR_SCHEDULE('S000425');
select ticketId from ticket where busScheduleId = 'S000425';

 DELETE FROM busSchedule
  WHERE busScheduleId = 'S000425';


 DELETE FROM ticket
  WHERE busScheduleId = 'S000425';