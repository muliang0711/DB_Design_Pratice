-- need to run WongSongLynn_seq_pcd2 first 
CREATE OR REPLACE PROCEDURE ProcessTicketRefund(
    p_ticketID   IN Ticket.ticketID%TYPE,
    p_refundType IN VARCHAR2
)
AS
    v_ticketStatus   Ticket.status%TYPE;
    v_paymentID      PaymentRecord.paymentID%TYPE;
    v_totalAmount    PaymentRecord.totalAmount%TYPE;
    v_pointsApplied  PaymentRecord.pointsApplied%TYPE;
    v_pointValue     PaymentRecord.pointValue%TYPE;
    v_customerID     Ticket.customerID%TYPE;
    v_refundAmount   NUMBER(8,2);
    v_daysBeforeDeparture NUMBER;
    v_departureTime  BusSchedule.plannedDepartureTime%TYPE;

    v_newPaymentID   VARCHAR2(12);
    v_newPointTxnID  VARCHAR2(12);
    v_result         VARCHAR2(100);
BEGIN
    -- Get ticket and payment details
    SELECT t.status,
        pr.paymentID,
        pr.totalAmount,
        pr.pointsApplied,
        pr.pointValue,
        pr.customerID,
        bs.plannedDepartureTime
    INTO v_ticketStatus,
        v_paymentID,
        v_totalAmount,
        v_pointsApplied,
        v_pointValue,
        v_customerID,
        v_departureTime
    FROM Ticket t
    JOIN PaymentRecord pr 
        ON t.ticketID = pr.ticketID
    JOIN BusSchedule bs 
        ON t.busScheduleID = bs.busScheduleID
    WHERE t.ticketID = p_ticketID;

    -- Check if ticket can be refunded
    IF LOWER(v_ticketStatus) NOT IN ('cancelled_by_user', 'cancelled_by_company') THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error: Ticket is not cancelled');
    END IF;

    -- Calculate days before departure
    v_daysBeforeDeparture := TRUNC(v_departureTime) - TRUNC(SYSDATE);

    -- Refund amount based on policy
    IF LOWER(p_refundType) = 'full' THEN
        v_refundAmount := v_totalAmount;
    ELSE
        IF v_daysBeforeDeparture > 7 THEN
            v_refundAmount := v_totalAmount * 0.8;
        ELSIF v_daysBeforeDeparture > 1 THEN
            v_refundAmount := v_totalAmount * 0.5;
        ELSE
            v_refundAmount := 0;
        END IF;
    END IF;

    -- Generate new IDs (use SEQUENCE in real system)
    SELECT 'RPY' || PaymentID_seq.NEXTVAL
    INTO v_newPaymentID
    FROM dual;
    
    SELECT 'RPT' || PointTxnID_seq.NEXTVAL
    INTO v_newPointTxnID
    FROM dual;

    -- Insert refund payment record
    INSERT INTO PaymentRecord (
        paymentID, customerID, ticketID, totalAmount, cashAmount,
        pointsApplied, pointValue, status, paymentTime,
        receiptNo, remarks, paymentMethod, type
    ) VALUES (
        v_newPaymentID, v_customerID, p_ticketID, v_refundAmount, 0,
         v_pointsApplied, v_pointValue, 'completed', SYSDATE,
        'REF-' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' || p_ticketID,
        'Refund for ticket ' || p_ticketID ,
        'Bank Transfer', 'Refund'
    );

    -- Return points if any were used
    IF v_pointsApplied > 0 THEN
        INSERT INTO PointTransaction (
            pointTxnID, customerID, paymentID, pointChange, source, remarks, createdAt
        ) VALUES (
            v_newPointTxnID, v_customerID, v_newPaymentID, v_pointsApplied,
            'Ticket Refund', 'Points returned for ticket ' || p_ticketID,
            SYSDATE
        );

        UPDATE Customer
        SET pointBalance = pointBalance + v_pointsApplied,
            updatedAt = SYSDATE
        WHERE customerID = v_customerID;
    END IF;

    v_result := 'Success: Refund processed for amount ' || v_refundAmount;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE(v_result);

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20002, 'Refund failed: ' || SQLERRM);
END ProcessTicketRefund;
/

-- valid execution
EXEC ProcessTicketRefund('T00000000020', 'full');

-- invalid execution
    -- been_bought
    EXEC ProcessTicketRefund('T00000000085', 'full');


-- Select Statement to verify see the result
SET linesize 250
SET pagesize 100
SELECT customerID, pointBalance, updatedAt FROM Customer WHERE customerID = 'CU0054';

SELECT p.customerID, p.ticketID, p.paymentID, p.totalAmount, pt.pointTxnID, p.pointsApplied, p.paymentTime, p.remarks    
FROM PaymentRecord p
JOIN PointTransaction pt ON pt.paymentID = p.paymentID
JOIN customer c ON c.customerID = p.customerID
WHERE p.ticketID = 'T00000000020'
ORDER BY p.paymentTime DESC;

-- Find valid record
SELECT 
    p.customerID,
    c.pointBalance,
    p.ticketID, 
    p.paymentID, 
    pt.pointTxnID, 
    p.paymentTime,
    p.pointsApplied
FROM PaymentRecord p
JOIN PointTransaction pt ON pt.paymentID = p.paymentID
JOIN customer c ON c.customerID = p.customerID
JOIN Ticket t ON t.ticketID = p.ticketID
WHERE c.pointBalance > 100 
AND p.pointsApplied >1 
AND t.status = 'cancelled_by_company'
ORDER BY p.paymentTime DESC;

SELECT *
FROM PaymentRecord
WHERE ticketID = 'T00000000020'
ORDER BY paymentTime DESC;

SELECT *
FROM PointTransaction
WHERE customerID = 'CU0415'
ORDER BY createdAt DESC;

SELECT customerID, pointBalance, updatedAt
FROM Customer
WHERE customerID = 'CU0415';
