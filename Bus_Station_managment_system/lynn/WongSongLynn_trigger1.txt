CREATE OR REPLACE TRIGGER EnforceTicketCreationRules
BEFORE INSERT OR UPDATE ON Ticket
FOR EACH ROW
DECLARE
    v_scheduleStatus VARCHAR2(20);
    v_busStatus      VARCHAR2(20);
    v_driverStatus   VARCHAR2(20);
BEGIN
    -- check bus schedule status 
    SELECT status
    INTO v_scheduleStatus
    FROM BusSchedule
    WHERE busScheduleID = :NEW.busScheduleID;

    IF LOWER(v_scheduleStatus) NOT IN ('planned', 'in_progress') THEN
        RAISE_APPLICATION_ERROR(-20001, 'Cannot create or update ticket for inactive bus schedule');
    END IF;

    -- check bus status
    SELECT b.status
    INTO v_busStatus
    FROM bus b
    JOIN driverListAssignment dla ON dla.busId = b.busId
    JOIN routeDriverAssignmentList rda ON rda.assignmentId = dla.assignmentId
    JOIN busSchedule bs ON bs.routeDriverAssignmentId = rda.routeDriverAssignmentId
    WHERE bs.busScheduleId = :NEW.busScheduleId
      AND ROWNUM = 1;

    IF LOWER(v_busStatus) != 'active' THEN
        RAISE_APPLICATION_ERROR(-20002, 'Cannot create or update ticket for schedule with inactive bus');
    END IF;

    -- check driver status
    SELECT d.status
    INTO v_driverStatus
    FROM busDriver d
    JOIN driverListAssignment dla ON dla.mainDriverId = d.driverId
    JOIN routeDriverAssignmentList rda ON rda.assignmentId = dla.assignmentId
    JOIN busSchedule bs ON bs.routeDriverAssignmentId = rda.routeDriverAssignmentId
    WHERE bs.busScheduleId = :NEW.busScheduleId
      AND ROWNUM = 1;

    IF LOWER(v_driverStatus) != 'active' THEN
        RAISE_APPLICATION_ERROR(-20003, 'Cannot create or update ticket for schedule with inactive driver');
    END IF;

    -- set the time
    IF INSERTING THEN
        :NEW.createdAt := SYSTIMESTAMP;
    END IF;
    :NEW.updatedAt := SYSTIMESTAMP;
END;
/

-- valid
INSERT INTO ticket (ticketId, busScheduleId, customerId, seatNo, price, type, status, cancellationDate, extensionDate, extendedFromId) 
VALUES ('T000000200', 'S000005', 'CU0001', 'D15', 135.50, 'booking', 'been_bought', NULL, NULL, NULL);

-- invalid 
INSERT INTO ticket (ticketId, busScheduleId, customerId, seatNo, price, type, status, cancellationDate, extensionDate, extendedFromId) 
VALUES ('T000000201', 'S000006', 'CU0001', 'D15', 135.50, 'booking', 'been_bought', NULL, NULL, NULL);

INSERT INTO ticket (ticketId, busScheduleId, customerId, seatNo, price, type, status, cancellationDate, extensionDate, extendedFromId) 
VALUES ('T000000201', 'S000001', 'CU0001', 'D15', 135.50, 'booking', 'been_bought', NULL, NULL, NULL);

INSERT INTO ticket (ticketId, busScheduleId, customerId, seatNo, price, type, status, cancellationDate, extensionDate, extendedFromId) 
VALUES ('T000000201', 'S000177', 'CU0001', 'D15', 135.50, 'booking', 'been_bought', NULL, NULL, NULL);



 SELECT * FROM ticket WHERE ticketid = 'T000000200';
--AND ROWNUM = 1 = only select 1 row so that wont have the problem like
-- B01     active
-- B02     inactive

-- select statement
 SELECT busScheduleid
    FROM busDriver d
    JOIN driverListAssignment dla ON dla.mainDriverId = d.driverId
    JOIN routeDriverAssignmentList rda ON rda.assignmentId = dla.assignmentId
    JOIN busSchedule bs ON bs.routeDriverAssignmentId = rda.routeDriverAssignmentId
    JOIN bus b ON b.busId = dla.busID
    WHERE bs.status = 'cancelled' AND d.status = 'active' AND b.status = 'active';