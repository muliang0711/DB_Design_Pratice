--Procedure 1: Deactivate an Entire Station
SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE sp_deactivate_station (
    p_station_id IN busStation.stationId%TYPE,
    p_reason     IN VARCHAR2
) AS
  v_station_status        busStation.status%TYPE;
  v_cancelled_schedules   NUMBER := 0;
  v_deactivated_platforms NUMBER := 0;
BEGIN
  -- Validate station
  BEGIN
    SELECT status INTO v_station_status
    FROM busStation
    WHERE stationId = p_station_id;

    IF UPPER(v_station_status) = 'INACTIVE' THEN
      DBMS_OUTPUT.PUT_LINE('INFO: Station ' || p_station_id || ' is already INACTIVE.');
      RETURN;
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20001, 'Station ID ' || p_station_id || ' does not exist.');
  END;

  DBMS_OUTPUT.PUT_LINE('Starting deactivation for Station ID: ' || p_station_id || ' ...');

  -- Cancel future PLANNED schedules that pass through any platform at this station
  UPDATE busSchedule bs
     SET status  = 'cancelled',
         remarks = SUBSTR('Cancelled due to station closure: ' || p_reason, 1, 200)
   WHERE LOWER(bs.status) = 'planned'
     AND bs.plannedDepartureTime > SYSTIMESTAMP
     AND EXISTS (
           SELECT 1
             FROM routeDriverAssignmentList rda
             JOIN routeStation rs ON rs.routeId = rda.routeId
             JOIN busPlatform  bp ON bp.platformId = rs.platformId
            WHERE rda.routeDriverAssignmentId = bs.routeDriverAssignmentId
              AND bp.stationId = p_station_id
         );

  v_cancelled_schedules := SQL%ROWCOUNT;
  DBMS_OUTPUT.PUT_LINE('> Cancelled ' || v_cancelled_schedules || ' future schedule(s).');

  -- Deactivate all platforms at this station
  UPDATE busPlatform
     SET status = 'inactive'
   WHERE stationId = p_station_id
     AND UPPER(status) = 'ACTIVE';

  v_deactivated_platforms := SQL%ROWCOUNT;
  DBMS_OUTPUT.PUT_LINE('> Deactivated ' || v_deactivated_platforms || ' platform(s).');

  -- Deactivate the station
  UPDATE busStation
     SET status = 'inactive'
   WHERE stationId = p_station_id;

  COMMIT;
  DBMS_OUTPUT.PUT_LINE('SUCCESS: Station ' || p_station_id || ' and related entities deactivated.');
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('ERROR: Deactivation failed. Rolled back.');
    RAISE;
END sp_deactivate_station;
/








--Procedure 2: Deactivate a Single Platform

CREATE OR REPLACE PROCEDURE sp_deactivate_platform (
    p_platform_id IN busPlatform.platformId%TYPE,
    p_reason      IN VARCHAR2
) AS
  v_platform_status     busPlatform.status%TYPE;
  v_cancelled_schedules NUMBER := 0;
BEGIN
  -- Validate platform
  BEGIN
    SELECT status INTO v_platform_status
    FROM busPlatform
    WHERE platformId = p_platform_id;

    IF UPPER(v_platform_status) = 'INACTIVE' THEN
      DBMS_OUTPUT.PUT_LINE('INFO: Platform ' || p_platform_id || ' is already INACTIVE.');
      RETURN;
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20011, 'Platform ID ' || p_platform_id || ' does not exist.');
  END;

  DBMS_OUTPUT.PUT_LINE('Starting deactivation for Platform ID: ' || p_platform_id || ' ...');

  -- Cancel future PLANNED schedules that include this platform
  UPDATE busSchedule bs
     SET status  = 'cancelled',
         remarks = SUBSTR('Cancelled due to platform closure: ' || p_reason, 1, 200)
   WHERE LOWER(bs.status) = 'planned'
     AND bs.plannedDepartureTime > SYSTIMESTAMP
     AND EXISTS (
           SELECT 1
             FROM routeDriverAssignmentList rda
             JOIN routeStation rs ON rs.routeId = rda.routeId
            WHERE rda.routeDriverAssignmentId = bs.routeDriverAssignmentId
              AND rs.platformId = p_platform_id
         );

  v_cancelled_schedules := SQL%ROWCOUNT;
  DBMS_OUTPUT.PUT_LINE('> Cancelled ' || v_cancelled_schedules || ' future schedule(s).');

  -- Deactivate the platform
  UPDATE busPlatform
     SET status = 'inactive'
   WHERE platformId = p_platform_id;

  COMMIT;
  DBMS_OUTPUT.PUT_LINE('SUCCESS: Platform ' || p_platform_id || ' deactivated.');
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('ERROR: Deactivation failed. Rolled back.');
    RAISE;
END sp_deactivate_platform;
/









--Trigger 1: Prevent Scheduling on Inactive Routes
--This trigger acts as a safety net to stop anyone from creating a new BusSchedule for a Route that has been
--marked as inactive.

CREATE OR REPLACE TRIGGER trg_bs_ins_no_inactive_rt
BEFORE INSERT ON busSchedule
FOR EACH ROW
DECLARE
  v_route_status route.status%TYPE;
BEGIN
  SELECT r.status
    INTO v_route_status
    FROM routeDriverAssignmentList rda
    JOIN route r ON r.routeId = rda.routeId
   WHERE rda.routeDriverAssignmentId = :NEW.routeDriverAssignmentId;

  IF UPPER(v_route_status) = 'INACTIVE' THEN
    RAISE_APPLICATION_ERROR(-20002,
      'Cannot create a schedule for an INACTIVE route (RDA: ' || :NEW.routeDriverAssignmentId || ').');
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20004,
      'Invalid reference: routeDriverAssignmentId ' || :NEW.routeDriverAssignmentId || ' does not exist.');
END;
/








--Trigger 2: Protect Platform from Unsafe Manual Updates
--This trigger prevents a user from directly running UPDATE BusPlatform SET status = 'inactive' ... if that
--platform still has active, future schedules. It forces them to use the sp_deactivate_platform procedure.

CREATE OR REPLACE TRIGGER trg_bp_upd_protect
BEFORE UPDATE OF status ON busPlatform
FOR EACH ROW
DECLARE
  v_future_schedules NUMBER;
BEGIN
  IF UPPER(:OLD.status) = 'ACTIVE' AND UPPER(:NEW.status) = 'INACTIVE' THEN
    SELECT COUNT(*)
      INTO v_future_schedules
      FROM busSchedule bs
      JOIN routeDriverAssignmentList rda
        ON rda.routeDriverAssignmentId = bs.routeDriverAssignmentId
      JOIN routeStation rs
        ON rs.routeId = rda.routeId
     WHERE rs.platformId = :NEW.platformId
       AND LOWER(bs.status) = 'planned'
       AND bs.plannedDepartureTime > SYSTIMESTAMP;

    IF v_future_schedules > 0 THEN
      RAISE_APPLICATION_ERROR(-20003,
        'Cannot deactivate platform ' || :NEW.platformId ||
        ' â€” ' || v_future_schedules || ' planned future schedule(s) exist. Use sp_deactivate_platform.');
    END IF;
  END IF;
END;
/
