
--Procedure 1: Deactivate a Single Platform

CREATE OR REPLACE PROCEDURE sp_deactivate_platform (
    p_platform_id IN busPlatform.platformId%TYPE,
    p_reason      IN VARCHAR2
) AS
  v_platform_status     busPlatform.status%TYPE;
  v_cancelled_schedules NUMBER := 0;
BEGIN
  -- Validate platform
  BEGIN
    SELECT status INTO v_platform_status
    FROM busPlatform
    WHERE platformId = p_platform_id;

    IF UPPER(v_platform_status) = 'INACTIVE' THEN
      DBMS_OUTPUT.PUT_LINE('INFO: Platform ' || p_platform_id || ' is already INACTIVE.');
      RETURN;
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20011, 'Platform ID ' || p_platform_id || ' does not exist.');
  END;

  DBMS_OUTPUT.PUT_LINE('Starting deactivation for Platform ID: ' || p_platform_id || ' ...');

  -- Cancel future PLANNED schedules that include this platform
  UPDATE busSchedule bs
     SET status  = 'cancelled',
         remarks = SUBSTR('Cancelled due to platform closure: ' || p_reason, 1, 200)
   WHERE LOWER(bs.status) = 'planned'
     AND bs.plannedDepartureTime > SYSTIMESTAMP
     AND EXISTS (
           SELECT 1
             FROM routeDriverAssignmentList rda
             JOIN routeStation rs ON rs.routeId = rda.routeId
            WHERE rda.routeDriverAssignmentId = bs.routeDriverAssignmentId
              AND rs.platformId = p_platform_id
         );

  v_cancelled_schedules := SQL%ROWCOUNT;
  DBMS_OUTPUT.PUT_LINE('> Cancelled ' || v_cancelled_schedules || ' future schedule(s).');

  -- Deactivate the platform
  UPDATE busPlatform
     SET status = 'inactive'
   WHERE platformId = p_platform_id;

  COMMIT;
  DBMS_OUTPUT.PUT_LINE('SUCCESS: Platform ' || p_platform_id || ' deactivated.');
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('ERROR: Deactivation failed. Rolled back.');
    RAISE;
END sp_deactivate_platform;
/










-- Procedure 2: delay procedure
CREATE OR REPLACE PROCEDURE sp_delay_schedules_at_station (
  p_station_id    IN busStation.stationId%TYPE,
  p_delay_minutes IN NUMBER,                       -- can be negative
  p_from          IN TIMESTAMP DEFAULT SYSTIMESTAMP,
  p_to            IN TIMESTAMP DEFAULT (SYSTIMESTAMP + NUMTODSINTERVAL(7,'DAY')),
  p_reason        IN VARCHAR2  DEFAULT 'operational delay'
) AS
  v_exists   NUMBER;
  v_affected NUMBER := 0;
BEGIN
  -- Validate station
  SELECT COUNT(*) INTO v_exists FROM busStation WHERE stationId = p_station_id;
  IF v_exists = 0 THEN
    RAISE_APPLICATION_ERROR(-20101, 'Station '||p_station_id||' does not exist.');
  END IF;

  IF p_delay_minutes = 0 THEN
    DBMS_OUTPUT.PUT_LINE('INFO: delay is 0 minute(s) - nothing to do.');
    RETURN;
  END IF;

  DBMS_OUTPUT.PUT_LINE(
    'Delaying schedules touching station '||p_station_id||
    ' by '||p_delay_minutes||' minute(s). Window: '||
    TO_CHAR(p_from, 'DD-MON-YYYY HH24:MI:SS')||' -> '||
    TO_CHAR(p_to,   'DD-MON-YYYY HH24:MI:SS')||'.'
  );

  -- Update planned departures
  UPDATE busSchedule bs
  SET
    bs.plannedDepartureTime = bs.plannedDepartureTime + NUMTODSINTERVAL(p_delay_minutes,'MINUTE'),
    bs.plannedArrivalTime   = CASE
                                WHEN bs.plannedArrivalTime IS NOT NULL
                                THEN bs.plannedArrivalTime + NUMTODSINTERVAL(p_delay_minutes,'MINUTE')
                                ELSE bs.plannedArrivalTime
                              END,
    bs.remarks = NVL(bs.remarks,'') ||
                 CASE WHEN bs.remarks IS NULL THEN '' ELSE ' | ' END ||
                 'Delayed '||p_delay_minutes||'m due to: '||p_reason
  WHERE
    LOWER(bs.status) = 'planned'
    AND bs.plannedDepartureTime BETWEEN p_from AND p_to
    AND EXISTS (
          SELECT 1
          FROM   routeDriverAssignmentList rda
          JOIN   routeStation rs ON rs.routeId = rda.routeId
          JOIN   busPlatform bp ON bp.platformId = rs.platformId
          WHERE  rda.routeDriverAssignmentId = bs.routeDriverAssignmentId
            AND  bp.stationId = p_station_id
        );

  v_affected := SQL%ROWCOUNT;

  COMMIT;
  DBMS_OUTPUT.PUT_LINE('SUCCESS: shifted '||v_affected||' schedule(s).');

EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('ERROR: sp_delay_schedules_at_station failed: '||SQLERRM);
    RAISE;
END;
/





-----------------------------------------------------------------------------------------------

--Trigger 1: Prevent Scheduling on Inactive Routes
--This trigger acts as a safety net to stop anyone from creating a new BusSchedule for a Route that has been
--marked as inactive.

CREATE OR REPLACE TRIGGER trg_bs_ins_no_inactive_rt
BEFORE INSERT ON busSchedule
FOR EACH ROW
DECLARE
  v_route_status route.status%TYPE;
BEGIN
  SELECT r.status
    INTO v_route_status
    FROM routeDriverAssignmentList rda
    JOIN route r ON r.routeId = rda.routeId
   WHERE rda.routeDriverAssignmentId = :NEW.routeDriverAssignmentId;

  IF UPPER(v_route_status) = 'INACTIVE' THEN
    RAISE_APPLICATION_ERROR(-20002,
      'Cannot create a schedule for an INACTIVE route (RDA: ' || :NEW.routeDriverAssignmentId || ').');
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20004,
      'Invalid reference: routeDriverAssignmentId ' || :NEW.routeDriverAssignmentId || ' does not exist.');
END;
/



-- Testing: 
--------------------------------------------------------------------------------------

-- ALTER TRIGGER RDA_AI_GEN_BS DISABLE;

UPDATE route SET status = 'inactive' WHERE routeId = 'R170';

INSERT INTO routeDriverAssignmentList
  (routeDriverAssignmentId, routeId, assignmentId,
   frequency, weekdays, effectiveFrom, effectiveTo, status, expectedProfit, remarks)
VALUES
  ('RDA170A1', 'R170', 'A004952',
   'daily', '1,2,3,4,5,6,7', DATE '2025-08-31', NULL, 'active', NULL, 'trigger test');

INSERT INTO busSchedule
  (busScheduleId, routeDriverAssignmentId, plannedDepartureTime, plannedArrivalTime, status, createdAt, updatedAt)
VALUES
  ('SCH_T01', 'RDA170A1', SYSTIMESTAMP + 1, SYSTIMESTAMP + 1 + INTERVAL '8' HOUR,
   'Planned', SYSTIMESTAMP, SYSTIMESTAMP);



--------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------
--Trigger 2: enforces the 2-driver rule for long trips
-- Enforce two drivers (MAIN + SUPPORT) for long trips (>= 8 hours).
-- Fires on create/update of schedules.
CREATE OR REPLACE TRIGGER trg_bs_two_drivers
BEFORE INSERT OR UPDATE OF routeDriverAssignmentId, plannedDepartureTime, plannedArrivalTime
ON busSchedule
FOR EACH ROW
DECLARE
  v_est_dur_min    NUMBER;  -- estimated duration in minutes
  v_main           driverListAssignment.mainDriverId%TYPE;
  v_sup            driverListAssignment.supportDriverId%TYPE;
BEGIN
  -- 1) Get route estimatedDuration (minutes) via RDA
  BEGIN
    SELECT r.estimatedDuration
      INTO v_est_dur_min
    FROM   routeDriverAssignmentList rda
    JOIN   route r ON r.routeId = rda.routeId
    WHERE  rda.routeDriverAssignmentId = :NEW.routeDriverAssignmentId;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20041,
        'Invalid routeDriverAssignmentId: '||:NEW.routeDriverAssignmentId);
  END;

  -- 2) If route has no estimate, derive from schedule times (if both present)
  IF v_est_dur_min IS NULL THEN
    IF :NEW.plannedDepartureTime IS NOT NULL
       AND :NEW.plannedArrivalTime   IS NOT NULL
    THEN
      v_est_dur_min :=
        (CAST(:NEW.plannedArrivalTime   AS DATE)
       - CAST(:NEW.plannedDepartureTime AS DATE)) * 24 * 60;
    ELSE
      v_est_dur_min := 0;
    END IF;
  END IF;

  -- 3) If >= 8 hours, both drivers must be set on the assignment
  IF v_est_dur_min >= 480 THEN
    SELECT a.mainDriverId, a.supportDriverId
      INTO v_main, v_sup
    FROM   routeDriverAssignmentList rda
    JOIN   driverListAssignment a ON a.assignmentId = rda.assignmentId
    WHERE  rda.routeDriverAssignmentId = :NEW.routeDriverAssignmentId;

    IF v_main IS NULL OR v_sup IS NULL THEN
      RAISE_APPLICATION_ERROR(
        -20042,
        'Long trips (>=8h) require MAIN and SUPPORT drivers for RDA '||:NEW.routeDriverAssignmentId
      );
    END IF;
  END IF;
END;
/




Testing: 
-----------------------------------------------------------------------------
DELETE FROM routeDriverAssignmentList
WHERE routeId = 'R170';


UPDATE route
   SET status = 'active', estimatedDuration = 600
 WHERE routeId = 'R170';



INSERT INTO routeDriverAssignmentList
  (routeDriverAssignmentId, routeId, assignmentId,
   frequency, weekdays, effectiveFrom, effectiveTo, status, expectedProfit, remarks)
VALUES
  ('RDA170A1', 'R170', 'A004952',
   'daily', '1,2,3,4,5,6,7', DATE '2025-08-31', NULL, 'active', NULL, 'trigger test');


UPDATE driverListAssignment
   SET supportDriverId = NULL
 WHERE assignmentId = 'A004952';


INSERT INTO busSchedule
  (busScheduleId, routeDriverAssignmentId, plannedDepartureTime, plannedArrivalTime,
   status, createdAt, updatedAt)
VALUES
  ('SCH_DRV1', 'RDA170A1',
   SYSTIMESTAMP + 1,
   SYSTIMESTAMP + 1 + INTERVAL '9' HOUR,
   'planned', SYSTIMESTAMP, SYSTIMESTAMP);

