/* ===========================================================
   BUS STATION MANAGEMENT — PLAIN DROP (child → parent)
   =========================================================== */
DROP TABLE pointTransaction;
DROP TABLE paymentRecord;
DROP TABLE ticket;
DROP TABLE tripStopLog;
DROP TABLE busSchedule;
DROP TABLE routeDriverAssignmentList;
DROP TABLE driverListAssignment;
DROP TABLE routeStation;
DROP TABLE maintenanceStaffAssignment;
DROP TABLE busMaintenance;
DROP TABLE rentalCollection;
DROP TABLE shop;
DROP TABLE busDriver;
DROP TABLE bus;
DROP TABLE route;
DROP TABLE busPlatform;
DROP TABLE staff;
DROP TABLE customer;
DROP TABLE busStation;
DROP TABLE busCompany;
DROP TABLE staffRole;
DROP TABLE maintenanceService;

/* ===========================================================
   BUS STATION MANAGEMENT — CREATE (parent → child)
   =========================================================== */

-- ========= PARENTS =========
CREATE TABLE staffRole (
  roleId       VARCHAR2(12)  PRIMARY KEY,
  roleName     VARCHAR2(50)  NOT NULL,
  description   VARCHAR2(200)
);

CREATE TABLE busCompany (
  companyId      VARCHAR2(12)  PRIMARY KEY,
  companyName    VARCHAR2(100) NOT NULL,
  registrationNo VARCHAR2(50)  UNIQUE,
  phoneNumber    VARCHAR2(20),
  email           VARCHAR2(100),
  address         VARCHAR2(200),
  status          VARCHAR2(20),
  createdAt      TIMESTAMP     DEFAULT SYSTIMESTAMP,
  updatedAt      TIMESTAMP     DEFAULT SYSTIMESTAMP,
  CONSTRAINT CHK_BUS_COMPANY_STATUS CHECK (LOWER(status) IN ('active','inactive'))
);

CREATE TABLE busStation (
  stationId   VARCHAR2(12)  PRIMARY KEY,
  stationName VARCHAR2(100),
  location     VARCHAR2(150),
  status       VARCHAR2(20),
  createdAt   TIMESTAMP     DEFAULT SYSTIMESTAMP,
  CONSTRAINT CHK_STATION_STATUS CHECK (LOWER(status) IN ('active','inactive'))
);

CREATE TABLE customer (
  customerId        VARCHAR2(12)  PRIMARY KEY,
  firstName         VARCHAR2(50)  NOT NULL,
  lastName          VARCHAR2(50)  NOT NULL,
  icPassportNo     VARCHAR2(30)  NOT NULL UNIQUE,
  gender             VARCHAR2(10),
  birthDate         DATE,
  phoneNumber       VARCHAR2(20),
  email              VARCHAR2(100),
  membershipStatus  VARCHAR2(10)  NOT NULL,
  pointBalance      NUMBER(10)    DEFAULT 0,
  createdAt         TIMESTAMP     DEFAULT SYSTIMESTAMP,
  updatedAt         TIMESTAMP     DEFAULT SYSTIMESTAMP,
  CONSTRAINT CHK_CUSTOMER_GENDER CHECK (gender IS NULL OR UPPER(gender) IN ('FEMALE','MALE')),
  CONSTRAINT CHK_MEMBERSHIP_STATUS CHECK (LOWER(membershipStatus) IN ('guest','member'))
);

CREATE TABLE maintenanceService (
  serviceId      VARCHAR2(12)  PRIMARY KEY,
  serviceItem    VARCHAR2(100) NOT NULL,
  serviceCost    NUMBER(8,2),
  serviceRemarks VARCHAR2(200),
  createdAt      TIMESTAMP     DEFAULT SYSTIMESTAMP
);

-- ========= DIRECT CHILDREN OF PARENTS =========
CREATE TABLE bus (
  busId       VARCHAR2(12)  PRIMARY KEY,
  companyId   VARCHAR2(12)  NOT NULL,
  plateNo     VARCHAR2(20)  NOT NULL UNIQUE,
  model        VARCHAR2(50),
  capacity     NUMBER(10),
  status       VARCHAR2(20),
  year         NUMBER(4),
  remarks      VARCHAR2(200),
  createdAt   TIMESTAMP     DEFAULT SYSTIMESTAMP,
  updatedAt   TIMESTAMP     DEFAULT SYSTIMESTAMP,
  CONSTRAINT FK_BUS_COMPANY FOREIGN KEY (companyId) REFERENCES busCompany (companyId),
  CONSTRAINT CHK_BUS_STATUS CHECK (LOWER(status) IN ('active','inactive','under_maintenance','retired'))
);

CREATE TABLE busDriver (
  driverId      VARCHAR2(12)  PRIMARY KEY,
  companyId     VARCHAR2(12),
  licenseNo     VARCHAR2(50)  UNIQUE,
  licenseExpiry DATE          NOT NULL,
  firstName     VARCHAR2(50)  NOT NULL,
  lastName      VARCHAR2(50)  NOT NULL,
  phoneNumber   VARCHAR2(20),
  status         VARCHAR2(20)  DEFAULT 'active',
  createdAt     TIMESTAMP     DEFAULT SYSTIMESTAMP,
  updatedAt     TIMESTAMP     DEFAULT SYSTIMESTAMP,
  CONSTRAINT FK_DRV_COMPANY FOREIGN KEY (companyId) REFERENCES busCompany (companyId),
  CONSTRAINT CHK_DRV_STATUS CHECK (LOWER(status) IN ('active','inactive','suspended'))
);

CREATE TABLE staff (
  staffId       VARCHAR2(12)  PRIMARY KEY,
  roleId        VARCHAR2(12),
  stationId     VARCHAR2(12),
  firstName     VARCHAR2(50)  NOT NULL,
  lastName      VARCHAR2(50)  NOT NULL,
  icPassportNo VARCHAR2(30)  NOT NULL UNIQUE,
  phoneNumber   VARCHAR2(20),
  email          VARCHAR2(100),
  hireDate      DATE,
  salary         NUMBER(10,2),
  status         VARCHAR2(20),
  createdAt     TIMESTAMP     DEFAULT SYSTIMESTAMP,
  updatedAt     TIMESTAMP     DEFAULT SYSTIMESTAMP,
  CONSTRAINT FK_STAFF_ROLE    FOREIGN KEY (roleId)    REFERENCES staffRole (roleId),
  CONSTRAINT FK_STAFF_STATION FOREIGN KEY (stationId) REFERENCES busStation (stationId)
);

CREATE TABLE shop (
  shopId     VARCHAR2(12)  PRIMARY KEY,
  stationId  VARCHAR2(12)  NOT NULL,
  shopNo     VARCHAR2(20)  NOT NULL,
  shopType   VARCHAR2(20),
  shopSize   NUMBER(8,2),
  status      VARCHAR2(20),
  createdAt  TIMESTAMP     DEFAULT SYSTIMESTAMP,
  updatedAt  TIMESTAMP     DEFAULT SYSTIMESTAMP,
  CONSTRAINT FK_SHOP_STATION FOREIGN KEY (stationId) REFERENCES busStation (stationId),
  CONSTRAINT UK_SHOP_STATION_NO UNIQUE (stationId, shopNo)
);

CREATE TABLE busPlatform (
  platformId   VARCHAR2(12)  PRIMARY KEY,
  stationId    VARCHAR2(12)  NOT NULL,
  platformName VARCHAR2(100) NOT NULL,
  location      VARCHAR2(150),
  status        VARCHAR2(20),
  createdAt    TIMESTAMP     DEFAULT SYSTIMESTAMP,
  CONSTRAINT FK_PLATFORM_STATION FOREIGN KEY (stationId) REFERENCES busStation (stationId),
  CONSTRAINT UK_PLATFORM_STATION_NAME UNIQUE (stationId, platformName),
  CONSTRAINT CHK_PLATFORM_STATUS CHECK (LOWER(status) IN ('active','inactive'))
);

CREATE TABLE route (
  routeId               VARCHAR2(12)  PRIMARY KEY,
  routeName             VARCHAR2(50)  NOT NULL,
  startPoint            VARCHAR2(12)  NOT NULL,  
  endPoint              VARCHAR2(12)  NOT NULL, 
  distanceKm            NUMBER(6,2),
  estimatedDuration     NUMBER(10),   -- minutes
  plannedDepartureTime VARCHAR2(5),  -- 'HH:MI'
  plannedArrivalTime   VARCHAR2(5),  -- 'HH:MI'
  status                 VARCHAR2(20),
  createdAt             TIMESTAMP     DEFAULT SYSTIMESTAMP,
  updatedAt             TIMESTAMP     DEFAULT SYSTIMESTAMP,
  CONSTRAINT FK_ROUTE_START FOREIGN KEY (startPoint) REFERENCES busStation (stationId),
  CONSTRAINT FK_ROUTE_END   FOREIGN KEY (endPoint)   REFERENCES busStation (stationId),
  CONSTRAINT UK_ROUTE_START_END UNIQUE (startPoint, endPoint),
  CONSTRAINT CHK_ROUTE_STATUS CHECK (LOWER(status) IN ('active','inactive')),
  CONSTRAINT CHK_ROUTE_TIME_FMT CHECK (
    (plannedDepartureTime IS NULL OR REGEXP_LIKE(plannedDepartureTime,'^[0-2][0-9]:[0-5][0-9]$')) AND
    (plannedArrivalTime   IS NULL OR REGEXP_LIKE(plannedArrivalTime,'^[0-2][0-9]:[0-5][0-9]$'))
  )
);

-- ========= SECOND-LEVEL CHILDREN =========
CREATE TABLE routeStation (
  routeStationId         VARCHAR2(12) PRIMARY KEY,
  routeId                 VARCHAR2(12) NOT NULL,
  platformId              VARCHAR2(12) NOT NULL,
  stopOrder               NUMBER(10)   NOT NULL,
  estimatedArrivalOffset NUMBER(10),
  CONSTRAINT FK_RS_ROUTE    FOREIGN KEY (routeId)    REFERENCES route (routeId),
  CONSTRAINT FK_RS_PLATFORM FOREIGN KEY (platformId) REFERENCES busPlatform (platformId),
  CONSTRAINT UK_RS_ROUTE_STOPORDER UNIQUE (routeId, stopOrder),
  CONSTRAINT UK_RS_ROUTE_PLATFORM  UNIQUE (routeId, platformId)
);

CREATE TABLE driverListAssignment (
  assignmentId     VARCHAR2(12)  PRIMARY KEY,
  mainDriverId    VARCHAR2(12)  NOT NULL,
  supportDriverId VARCHAR2(12),
  busId            VARCHAR2(12)  NOT NULL,
  assignedFrom     TIMESTAMP,
  assignedTo       TIMESTAMP,
  status            VARCHAR2(20)  DEFAULT 'not_assigned',
  remarks           VARCHAR2(200),
  CONSTRAINT FK_DLA_MAIN     FOREIGN KEY (mainDriverId)    REFERENCES busDriver (driverId),
  CONSTRAINT FK_DLA_SUPPORT  FOREIGN KEY (supportDriverId) REFERENCES busDriver (driverId),
  CONSTRAINT FK_DLA_BUS      FOREIGN KEY (busId)            REFERENCES bus (busId),
  CONSTRAINT UK_DLA UNIQUE (mainDriverId, supportDriverId, busId, assignedFrom),
  CONSTRAINT CHK_DLA_STATUS  CHECK (LOWER(status) IN ('inactive','active','not_assigned')),
  CONSTRAINT CHK_DLA_DISTINCT CHECK (supportDriverId IS NULL OR supportDriverId <> mainDriverId)
);

CREATE TABLE routeDriverAssignmentList (
  routeDriverAssignmentId VARCHAR2(12) PRIMARY KEY,
  routeId        VARCHAR2(12)  NOT NULL,
  assignmentId   VARCHAR2(12)  NOT NULL,
  frequency       VARCHAR2(10)  NOT NULL, -- 'daily','weekly','monthly'
  weekdays        VARCHAR2(20)  NOT NULL, -- e.g. '1,2,3'
  effectiveFrom  DATE          NOT NULL,
  effectiveTo    DATE,
  status          VARCHAR2(20)  DEFAULT 'active',
  expectedProfit NUMBER(8,2),
  remarks         VARCHAR2(200),
  CONSTRAINT FK_RDA_ROUTE      FOREIGN KEY (routeId)      REFERENCES route (routeId),
  CONSTRAINT FK_RDA_ASSIGNMENT FOREIGN KEY (assignmentId) REFERENCES driverListAssignment (assignmentId),
  CONSTRAINT UK_RDA UNIQUE (routeId, assignmentId, effectiveFrom),
  CONSTRAINT CHK_RDA_STATUS CHECK (LOWER(status) IN ('active','inactive')),
  CONSTRAINT CHK_RDA_FREQ   CHECK (LOWER(frequency) IN ('daily','weekly','monthly'))
);

CREATE TABLE busSchedule (
  busScheduleId          VARCHAR2(12)  PRIMARY KEY,
  routeDriverAssignmentId VARCHAR2(12) NOT NULL,
  plannedDepartureTime   TIMESTAMP     NOT NULL,
  plannedArrivalTime     TIMESTAMP,
  status                   VARCHAR2(20)  DEFAULT 'Planned',
  remarks                  VARCHAR2(200),
  expectedProfit          NUMBER(8,2),
  createdAt               TIMESTAMP     DEFAULT SYSTIMESTAMP,
  updatedAt               TIMESTAMP     DEFAULT SYSTIMESTAMP,
  CONSTRAINT FK_BS_RDA FOREIGN KEY (routeDriverAssignmentId)
    REFERENCES routeDriverAssignmentList (routeDriverAssignmentId),
  CONSTRAINT CHK_BS_STATUS CHECK (LOWER(status) IN ('planned','cancelled','completed','in_progress')),
  CONSTRAINT CHK_BS_TIME   CHECK (plannedArrivalTime IS NULL OR plannedArrivalTime >= plannedDepartureTime)
);

-- ========= TICKETS / PAY / POINTS / LOGS =========
CREATE TABLE ticket (
  ticketId         VARCHAR2(12)  PRIMARY KEY,
  busScheduleId   VARCHAR2(12)  NOT NULL,
  customerId       VARCHAR2(12),
  seatNo           VARCHAR2(10),
  price             NUMBER(8,2)   NOT NULL,
  type              VARCHAR2(20),
  status            VARCHAR2(30),
  cancellationDate TIMESTAMP,
  extensionDate    TIMESTAMP,
  extendedToId    VARCHAR2(12), -- FK → busSchedule
  createdAt        TIMESTAMP     DEFAULT SYSTIMESTAMP,
  updatedAt        TIMESTAMP     DEFAULT SYSTIMESTAMP,
  CONSTRAINT FK_TKT_SCHED   FOREIGN KEY (busScheduleId) REFERENCES busSchedule (busScheduleId),
  CONSTRAINT FK_TKT_CUST    FOREIGN KEY (customerId)     REFERENCES customer (customerId),
  CONSTRAINT FK_TKT_EXT_TO  FOREIGN KEY (extendedToId)  REFERENCES busSchedule (busScheduleId),
  CONSTRAINT CHK_TKT_TYPE   CHECK (LOWER(type) IN ('regular','booking')),
  CONSTRAINT CHK_TKT_STATUS CHECK (LOWER(status) IN (
    'cancelled_by_company','cancelled_by_user','booked_extended','been_bought'
  ))
);

CREATE TABLE paymentRecord (
  paymentId     VARCHAR2(12)  PRIMARY KEY,
  customerId    VARCHAR2(12),
  ticketId      VARCHAR2(12),
  totalAmount   NUMBER(8,2),
  cashAmount    NUMBER(8,2),
  pointsApplied NUMBER(10),
  pointValue    NUMBER(8,2),
  status         VARCHAR2(20),
  paymentTime   TIMESTAMP,
  receiptNo     VARCHAR2(50),
  remarks        VARCHAR2(200),
  paymentMethod VARCHAR2(100),
  type           VARCHAR2(50),
  CONSTRAINT FK_PAY_CUSTOMER FOREIGN KEY (customerId) REFERENCES customer (customerId),
  CONSTRAINT FK_PAY_TICKET   FOREIGN KEY (ticketId)   REFERENCES ticket (ticketId),
  CONSTRAINT CHK_PAY_STATUS  CHECK (LOWER(status) IN ('completed','pending','failed'))
);

CREATE TABLE pointTransaction (
  pointTxnId  VARCHAR2(12)  PRIMARY KEY,
  customerId   VARCHAR2(12)  NOT NULL,
  paymentId    VARCHAR2(12),
  pointChange  NUMBER(10),
  source        VARCHAR2(50),
  remarks       VARCHAR2(200),
  createdAt    TIMESTAMP     DEFAULT SYSTIMESTAMP,
  CONSTRAINT FK_PTXN_CUSTOMER FOREIGN KEY (customerId) REFERENCES customer (customerId),
  CONSTRAINT FK_PTXN_PAYMENT  FOREIGN KEY (paymentId)  REFERENCES paymentRecord (paymentId)
);

CREATE TABLE tripStopLog (
  tripStopId        VARCHAR2(12)  PRIMARY KEY,
  busScheduleId     VARCHAR2(12)  NOT NULL,
  platformId         VARCHAR2(12)  NOT NULL,
  actualArrivalTime   TIMESTAMP,
  actualDepartureTime TIMESTAMP,
  status              VARCHAR2(20),
  remarks             VARCHAR2(200),
  CONSTRAINT FK_TSL_SCHEDULE FOREIGN KEY (busScheduleId) REFERENCES busSchedule (busScheduleId),
  CONSTRAINT FK_TSL_PLATFORM FOREIGN KEY (platformId)     REFERENCES busPlatform (platformId),
  CONSTRAINT CHK_TSL_TIME CHECK (
    actualDepartureTime IS NULL OR actualArrivalTime IS NULL OR actualDepartureTime >= actualArrivalTime
  )
);

-- ========= MAINTENANCE (depends on bus / staff) =========
CREATE TABLE busMaintenance (
  maintenanceId        VARCHAR2(12)  PRIMARY KEY,
  busId                VARCHAR2(12)  NOT NULL,
  serviceId            VARCHAR2(12)  NOT NULL,
  actualCost           NUMBER(8,2),
  additionalCost       NUMBER(8,2),
  additionalRemarks    VARCHAR2(200),
  status                VARCHAR2(20)  DEFAULT 'in_progress',
  maintenanceDoneDate TIMESTAMP     NOT NULL,
  createdAt            TIMESTAMP     DEFAULT SYSTIMESTAMP,
  remarks               VARCHAR2(200),
  CONSTRAINT FK_BM_BUS     FOREIGN KEY (busId)     REFERENCES bus (busId),
  CONSTRAINT FK_BM_SERVICE FOREIGN KEY (serviceId) REFERENCES maintenanceService (serviceId),
  CONSTRAINT UK_BM_BS_DATE UNIQUE (busId, serviceId, maintenanceDoneDate),
  CONSTRAINT CHK_BM_STATUS CHECK (LOWER(status) IN ('completed','in_progress'))
);

CREATE TABLE maintenanceStaffAssignment (
  maintenanceId VARCHAR2(12) NOT NULL,
  staffId       VARCHAR2(12) NOT NULL,
  assignedAt    TIMESTAMP    DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (maintenanceId, staffId),
  CONSTRAINT FK_MSA_MAINT FOREIGN KEY (maintenanceId) REFERENCES busMaintenance (maintenanceId),
  CONSTRAINT FK_MSA_STAFF FOREIGN KEY (staffId)       REFERENCES staff (staffId)
);

-- ========= RENTAL (depends on shop / staff) =========
CREATE TABLE rentalCollection (
  shopId         VARCHAR2(12)  NOT NULL,
  staffId        VARCHAR2(12)  NOT NULL,
  rentalAmount   NUMBER(8,2),
  status          VARCHAR2(20),
  rentalMonth    DATE,
  createdAt      TIMESTAMP     DEFAULT SYSTIMESTAMP,
  collectionDate TIMESTAMP     DEFAULT SYSTIMESTAMP,
  CONSTRAINT PK_RENTAL_COLLECTION PRIMARY KEY (shopId, staffId, collectionDate),
  CONSTRAINT FK_RC_SHOP  FOREIGN KEY (shopId)  REFERENCES shop (shopId),
  CONSTRAINT FK_RC_STAFF FOREIGN KEY (staffId) REFERENCES staff (staffId)
);