// ============================================
// REFERENCE DATA TABLES
// ============================================

Table StaffRole {
  roleID NUMBER(10) [pk, increment, note: 'Unique role ID']
  roleName VARCHAR2(50) [not null, note: "e.g. 'Counter Staff', 'Cleaner'"]
  description VARCHAR2(200)
}

Table BusCompany {
  companyID NUMBER(10) [pk, increment, note: 'Unique company identifier']
  companyName VARCHAR2(100) [not null, note: 'Name of the bus company']
  registrationNo VARCHAR2(50) [unique, note: 'Company registration / license number']
  phoneNumber VARCHAR2(20)
  email VARCHAR2(100)
  address VARCHAR2(200)
  status ENUM(active , inactive)
  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
  updatedAt TIMESTAMP [default: `CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP`]
}

// ============================================
// CUSTOMER MANAGEMENT
// ============================================

Table Customer {
  customerID NUMBER(10) [pk, increment, note: 'Primary Key, Auto Increment']
  firstName VARCHAR2(50) [not null]
  lastName VARCHAR2(50) [not null]
  ICPassportNo VARCHAR2(30) [unique, not null, note: 'IC number / Passport']
  gender ENUM('Female', 'Male')
  birthDate DATE
  phoneNumber VARCHAR2(20)
  email VARCHAR2(100)
  membershipStatus ENUM('guest', 'member') [not null]
  pointBalance NUMBER(10) [default: 0, note: 'Quick access to current points. Always 0 for guests (i.e. non-members).']
  // customerType NUMBER(10) [note: 'FK to CustomerType']
  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
  updatedAt TIMESTAMP [default: `CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP`]
}

// ============================================
// STAFF MANAGEMENT
// ============================================

Table Staff {
  staffID NUMBER(10) [pk, increment, note: 'Unique identifier for staff']
  roleID NUMBER(10) [ref: > StaffRole.roleID, note: 'FK to StaffRole']
  stationID NUMBER(10) [ref: > BusStation.stationID, note: 'FK to BusStation']
  firstName VARCHAR2(50) [not null]
  lastName VARCHAR2(50) [not null]
  ICPassportNo VARCHAR2(30) [unique, not null]
  phoneNumber VARCHAR2(20)
  email VARCHAR2(100)
  hireDate DATE [note: 'Date of employment']
  salary NUMBER(10,2)
  status VARCHAR2(20) [note: "e.g. 'Active', 'On Leave', 'Terminated'"]
  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
  updatedAt TIMESTAMP [default: `CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP`]
}


// ============================================
// LOCATION AND ROUTE MANAGEMENT
// ============================================

Table BusStation {
  stationID NUMBER(10) [pk, increment]
  stationName VARCHAR2(100)
  location VARCHAR2(150)
  status ENUM(active , inactive)
  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
}

Table BusPlatform {
  platformID NUMBER(10) [pk, increment, note: 'Unique ID for platform']
  stationID NUMBER(10) [ref: > BusStation.stationID, not null, note: 'ID of the bus station where a platform is located']
  platformName VARCHAR2(100) [not null, note: 'e.g. "KLCC", "Pasar Seni"']
  location VARCHAR2(150) [note: 'GPS coordinates or address']
  status ENUM(active , inactive)
  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
}

Table Route {
  routeID NUMBER(10) [pk, increment, note: 'Unique ID for this route']
  routeName VARCHAR2(50) [not null, note: 'Name or code like "U34", "KLCC - Bukit Bintang"']
  startPoint VARCHAR2(100) [note: 'Starting terminal / station name']
  endPoint VARCHAR2(100) [note: 'Ending terminal / station name']
  distanceKM NUMBER(6,2) [note: 'Total distance in km']
  estimatedDuration NUMBER(10) [note: 'Typical trip duration in minutes']
  plannedDepartureTime TIME [note: 'Typical departure time from start point']
  plannedArrivalTime TIME [note: 'Typical arrival time at end point' ,'only have time not date']
  status ENUM(active , inactive)
  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
  updatedAt TIMESTAMP [default: `CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP`]
}

Table RouteStation {
  routeStationID NUMBER(10) [pk, increment]
  routeID NUMBER(10) [ref: > Route.routeID, not null, note: 'FK to Route']
  plaformID NUMBER(10) [ref: > BusPlaform.plaformID, not null, note: 'FK to BusStation']
  stopOrder NUMBER(10) [not null, note: 'Sequence number (1,2,3,...)']
  estimatedArrivalOffset NUMBER(10) [note: 'Minutes from route start']

  Note: 'Defines ordered stations along a route'
}

// ============================================
// BUS FLEET MANAGEMENT
// ============================================

Table Bus {
  busID NUMBER(10) [pk, increment, note: 'Unique identifier for bus']
  companyID NUMBER(10) [ref: > BusCompany.companyID, not null, note: 'FK to BusCompany']
  plateNo VARCHAR2(20) [unique, not null, note: 'Vehicle registration number']
  model VARCHAR2(50) [note: 'Bus model / type (e.g. Hino 40-Seater)']
  capacity NUMBER(10) [note: 'Number of seats']
  status ENUM(Active, In_Maintenance, Retired , in_Active)
  year NUMBER(4) [note: 'Year of manufacture / acquisition']
  remarks VARCHAR2(200) [note: 'Notes like AC, TV etc.']
  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
  updatedAt TIMESTAMP [default: `CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP`]
}

// A menu of maintenance services offered
Table MaintenanceService {
  serviceID NUMBER(10) [pk, increment, note: 'Unique service detail record']
  serviceItem VARCHAR2(100) [not null, note: "Specific service item done e.g. 'Oil Change', 'Brake Pad Replace'"]
  serviceCost NUMBER(8,2) [note: 'Cost for this specific service item']
  serviceRemarks VARCHAR2(200) [note: 'Any special notes about this service item']
  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]

  Note: 'A menu of maintenance services offered'
}

// Associative entity between `Bus` and `MaintenanceService`. Records instances of maintenance services requested by buses.
Table BusMaintenance {
  maintenanceID NUMBER(10) [pk, increment, note: 'Unique maintenance record']
  busID NUMBER(10) [ref: > Bus.busID, not null, note: 'FK to Bus']
  serviceID NUMBER(10) [ref: > MaintenanceService.serviceID, not null, note: 'FK to MaintenanceService']

  actualCost NUMBER(8,2) [note: 'Total cost incurred for this maintenance']
  additionalCost NUMBER(8,2) [note: 'if any extra costs not covered by service']
  additionalRemarks VARCHAR2(200) [note: 'Any extra notes about this maintenance']
  status ENUM(Completed , InProgress)

  maintenanceDate TIMESTAMP [not null , note: 'The time of how long the bus is in maintenance']
  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]

  remarks VARCHAR2(200)

  Note: 'Associative entity between `Bus` and `MaintenanceService`. Records instances of maintenance services requested by buses.'
}

// associative entity between `BusMaintenance` and `Staff`
Table MaintenanceStaffAssignment {
  // Composite PK is defined in `Indexes` block of this table
  maintenanceID NUMBER(10) [ref: > BusMaintenance.maintenanceID]
  staffID NUMBER(10) [ref: > Staff.staffID]
  remarks [note: 'Optional remarks on a specific maintenance service worker during a specific service']

  Indexes {
    // Composite PK
    (maintenanceID, staffID) [pk]
  }

  Note: 'Associative entity between `BusMaintenance` and `Staff`'
}

// ============================================
// SCHEDULE AND OPERATIONS
// ============================================

Table BusSchedule {
  BusScheduleID NUMBER(10) [pk, increment, note: 'Unique ID for each planned trip']
  routeDriverAssignmentID int [ref: > RouteDriverAssignmentList.routeDriverAssignmentID, not null, note: 'FK to RouteDriverAssignmentList']
  plannedDepartureTime TIMESTAMP [not null, note: 'When this trip starts']
  plannedArrivalTime TIMESTAMP [note: 'Estimated end time']
  status ENUM(Planned ,Cancelled ,Completed ,InProgress ,Pending) [default: 'Planned', note: 'Current status of this schedule']
  remarks VARCHAR2(200) [note: 'Any notes']
  // price NUMBER(6,2) [note: '666.66']
  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
  updatedAt TIMESTAMP [default: `CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP`]
}

Table BusDriver {
  driverID NUMBER(10) [pk, increment]
  companyID NUMBER(10) [ref: > BusCompany.companyID]
  licenseNo VARCHAR2(50) [unique, note: 'Driving license number if driver']
  // All bus drivers must have PSV license anyway, so no point recording licenseType
  // licenseType VARCHAR2(20) [note: "e.g. 'PSV' (Public Service Vehicle), 'GDL' (Goods Driving Licence)"]
  licenseExpiry DATE [not null]
  firstName VARCHAR2(50) [not null]
  lastName VARCHAR2(50) [not null]
  phoneNumber VARCHAR2(20)
  status ENUM('active', 'inactive', 'suspended') [default: 'active']
  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
  updatedAt TIMESTAMP [default: `CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP`]
}

Table RouteDriverAssignmentList {
  routeDriverAssignmentID int [pk, increment, note: 'Unique recurring assignment record']
  routeID int [ref: > Route.routeID, not null, note: 'FK to Route']
  assignmentID int [ref: > DriverListAssignment.assignmentID, not null, note: 'FK to DriverListAssignment']
  frequency enum('daily', 'weekly', 'monthly') [not null, note: 'Frequency of recurrence, e.g., daily, weekly, monthly'] // values: daily, weekly, monthly
  weekdays varchar(20) [not null, note: 'Comma-separated weekdays: 1=Mon, 7=Sun' , note: 'e.g. "1,2,3"']
  effectiveFrom date [not null, note: 'Start date of this recurring assignment']
  effectiveTo date [note: 'End date (optional), NULL for indefinite']   
  status enum('active', 'inactive') [default: 'active', note: 'inactive when the referenced DriverListAssignment is not active'] // values: active, inactive
  remarks varchar(200) [note: 'Optional notes']
}


Table DriverListAssignment {
  assignmentID NUMBER(10) [pk, increment, note: 'Unique assignment record']
  driverID NUMBER(10) [ref: > BusDriver.driverID, not null, note: 'FK to BusDriver']
  busID NUMBER(10) [ref: > Bus.busID, not null, note: 'FK to Bus']
  assignedFrom TIMESTAMP
  assignedTo TIMESTAMP
  status ENUM(in_Active , active , not_assigned) [default: 'not_assigned', note: 'not_assigned means not assigned to any schedule yet , active means currently assigned to a schedule , in_Active means one of the bus or driver is not active but it might still have OR  not have bus schedule assigned']
  remarks VARCHAR2(200)

  Note: 'Assigns a driver and bus to run a scheduled trip'
}

Table TripStopLog {
  tripStopID NUMBER(10) [pk, increment]
  BusScheduleID NUMBER(10) [ref: > BusSchedule.BusScheduleID, not null, note: 'FK to BusSchedule']
  platformID NUMBER(10) [ref: > BusPlaform.plaformID, not null, note: 'FK to BusPlatform']
  actualArrivalTime TIMESTAMP
  actualDepartureTime TIMESTAMP
  status VARCHAR2(20) [note: "e.g. 'Arrived', 'Skipped', 'Delayed'"]
}

// ============================================
// PAYMENT SYSTEM
// ============================================

Table PaymentRecord {
  paymentID NUMBER(10) [pk, increment, note: 'Unique ID for each payment transaction']
  customerID NUMBER(10) [ref: > Customer.customerID, note: 'FK to Customer']
  ticketID NUMBER(10) [ref: > Ticket.ticketID, note: 'FK to Ticket if applicable']

  // ------
  // paymentMethodID NUMBER(10) [note: 'FK to PaymentMethod']
  // ------
  // ticketID NUMBER(10) [ref: > Ticket.ticketID, note: 'FK to Ticket if applicable']
  // I think we don't need this bcuz Ticket already has a FK . 
  // referencing Payment.paymentID. 
  // ------

  totalAmount NUMBER(8,2) [note: 'Full transaction value (cash + point value combined)']
  cashAmount NUMBER(8,2) [note: 'Actual cash/card portion paid or refunded']
  pointsApplied NUMBER(10) [note: 'Points used (positive) or refunded (negative for refunds)']
  pointValue NUMBER(8,2) [note: 'RM value of points used, for easy calculation']
  status ENUM(Completed,Pending,Failed)
  paymentTime TIMESTAMP [note: 'When payment was made']
  receiptNo VARCHAR2(50) [note: 'Reference from payment gateway']
  remarks VARCHAR2(200) [note: 'Notes or error messages']
  paymentMethod VARCHAR2(100)
  type VARCHAR2(50) 
  [note: "
  'BookingTicket',
  'membership_fee', 
  'refund', 
  'extension_charge', 
  'point_transaction',
  'FinishPaymentOfBookingTicket',
  'RegularTicketPurchase',
  "]

  // ------
  // originalPaymentID NUMBER(10) [ref: > Payment.paymentID, note: 'Links refunds back to original purchase']
  // I think one paymentID is enough to track the payment ? 
  // ------
  }



Table PointTransaction {
  pointTxnID NUMBER(10) [pk, increment, note: 'Unique point transaction']
  customerID NUMBER(10) [ref: > Customer.customerID, not null, note: 'FK to Customer']
  paymentID NUMBER(10) [ref: > Payment.paymentID, note: 'FK to Payment if tied to purchase', null]
  pointChange NUMBER(10) [note: '+10 for earn, -50 for redeem']

  source VARCHAR2(50) [note: "e.g. 'Ticket Purchase', 'Birthday Promo', 'Ticket Cancellation"]
  remarks VARCHAR2(200)
  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
}

// ============================================
// TICKETING SYSTEM
// ============================================

Table Ticket {
  ticketID NUMBER(10) [pk, increment, note: 'Unique ticket']
  BusScheduleID NUMBER(10) [ref: > BusSchedule.BusScheduleID, not null, note: 'FK to BusSchedule']
  customerID NUMBER(10) [ref: > Customer.customerID, not null, note: 'FK to Customer']

  seatNo VARCHAR2(10) [note: "'Seat identifier' , e.g. BUS001-A1 [BUSNAME/ID-SeatNo]"]
  price NUMBER(8,2) [not null]
  type ENUM('regular', 'booking') [note: "e.g. 'regular' for normal purchase, 'booking' for pre-booked tickets"]
  status ENUM('Cancelled_By_Company','Cancelled_By_User','booked_extended') [default: 'null']
  cancellationDate TIMESTAMP [note: 'Date of cancellation if valid']

  extensionDate TIMESTAMP [note: 'When is the extension made']
  extendedToID NUMBER(10) [ref: > BusSchedule.BusScheduleID, note: 'FK to BusSchedule. New schedule that the ticket is extended to']

  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
  updatedAt TIMESTAMP [default: `CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP`]
}

// ============================================
// SHOP AND TENANT MANAGEMENT
// ============================================

// Table Tenant {
//   tenantID NUMBER(10) [pk, increment, note: 'Unique tenant ID']
//   tenantName VARCHAR2(100) [not null, note: 'Company or individual name']
//   phoneNumber VARCHAR2(20)
//   emergencyContactName VARCHAR2(100) [note: 'Name of emergency contact person']
//   emergencyContactNo VARCHAR2(20) [note: 'Contact number of emergency contact']
//   email VARCHAR2(100)
//   address VARCHAR2(200)
//   status VARCHAR2(20) [note: "e.g. 'Active', 'Terminated'"]
//   createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
//   updatedAt TIMESTAMP [default: `CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP`]
// }

Table Shop {
  shopID NUMBER(10) [pk, increment, not null, note: 'Unique shop ID']
  stationID NUMBER(10) [ref: > BusStation.stationID, note: 'FK to BusStation where shop is located']
  //tenantID NUMBER(10) [ref: > Tenant.tenantID, note: 'FK to Tenant']
  shopNo VARCHAR2(20) [not null, note: 'Shop lot number or identifier']
  shopType VARCHAR2(20) [note: "'FoodCourt' or 'ShopLot'"]
  shopSize NUMBER(8,2) [note: 'Size in sq ft or sqm']
  //rentalFee NUMBER(10,2)
  //deposit NUMBER(10,2)
  //contractStart DATE
  //contractEnd DATE
  status VARCHAR2(20) [note: "e.g. 'Occupied', 'Vacant'"]
  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
  updatedAt TIMESTAMP [default: `CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP`]
}

Table RentalCollection {
  shopID NUMBER(10) [ref: > Shop.shopID, not null]
  staffID NUMBER(10) [ref: > Staff.staffID, not null]
  collectionDate DATE 
  rentalAmount NUMBER(8,2)

  Indexes {
    // Note: `cmp_pk` is short for 'compound primary key'
    cmp_pk_rentalcollection (shopID, staffID, collectionDate) [pk]
  }
}


// Table TenancyAgreement {
//   agreementID NUMBER(10) [pk, increment]
//   tenantID NUMBER(10) [ref: > Tenant.tenantID, not null]
//   shopID NUMBER(10) [ref: > Shop.shopID, not null]
//   rentalFee NUMBER(10,2)
//   deposit NUMBER(10,2)
//   startDate DATE [not null]
//   endDate DATE [not null]
//   createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
//   updatedAt TIMESTAMP [default: `CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP`]

//   Indexes {
//     // ensure unique combination of these three columns
//     // `unique_tenancyagreement` is the index name.
//     unique_tenancyagreement (tenantID, shopID, startDate) [unique]
//   }
// }

Table ShopPayment {
  shopPayID NUMBER(10) [pk, increment, note: 'Unique payment record']
  shopID NUMBER(10) [ref: > Shop.shopID, not null, note: 'FK to Shop']
  //tenantID NUMBER(10) [ref: > Tenant.tenantID, not null, note: 'FK to Tenant for quick ref']
  payType VARCHAR2(20) [not null, note: "e.g. 'Rental', 'Deposit', 'Penalty'"]
  amount NUMBER(10,2) [not null]
  paymentDate TIMESTAMP [not null]
  paymentMethod VARCHAR2(30) [note: "e.g. 'Cash', 'Transfer', 'Cheque'"]
  status ENUM(Completed, Pending, Failed)
  receiptNo VARCHAR2(50)
  remarks VARCHAR2(200)
  createdAt TIMESTAMP [default: `CURRENT_TIMESTAMP`]
  updatedAt TIMESTAMP [default: `CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP`]
}   
